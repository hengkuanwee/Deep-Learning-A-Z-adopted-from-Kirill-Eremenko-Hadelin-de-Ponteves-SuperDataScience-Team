# Part 1 - Building the CNN
# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers import Dropout

# Initialising the CNN
classifier = Sequential()

# Step 1 - Convolution 
classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))

# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Adding a second convolutional layer
classifier.add(Conv2D(64, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dropout(rate = 0.1)) #KW
classifier.add(Dense(units = 128, activation = 'relu')) #KW
classifier.add(Dropout(rate = 0.1)) #KW

classifier.add(Dense(units = 1, activation = 'sigmoid'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Part 2 - Fitting the CNN to the images
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory('dataset/training_set',
                                                target_size=(64, 64),
                                                batch_size=32,
                                                class_mode='binary')

test_set = test_datagen.flow_from_directory('dataset/test_set',
                                            target_size=(64, 64),
                                            batch_size=32,
                                            class_mode='binary')

classifier.fit_generator(training_set,
                    steps_per_epoch=(8000/32),
                    epochs=25,
                    validation_data=test_set,
                    validation_steps=(2000/32))
'''
# Part 3 - Making new predictions

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('dataset/single_prediction/cat_or_dog_2.jpg', target_size =  (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
training_set.class_indices

if result[0][0] == 1:
    prediction = 'dog'
else:
    prediction = 'cat'
'''

# Part 4 - Improving and Tuning the CNN

# Improving the ANN
# Dropout Regularisation to reduce overfitting if needed

# Tuning the ANN
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.optimizers import Adam
from keras.preprocessing.image import ImageDataGenerator

"""
    Creates a CNN model
    p: Dropout rate
    input_shape: Shape of input 
"""

def create_classifier(rate, input_shape=(32, 32, 3)):
    classifier = Sequential()
    # Convolution + Pooling Layer 
    classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))
    classifier.add(MaxPooling2D(pool_size = (2, 2)))
    # Convolution + Pooling Layer 
    classifier.add(Conv2D(64, (3, 3), activation = 'relu'))
    classifier.add(MaxPooling2D(pool_size = (2, 2)))
    # Convolution + Pooling Layer 
    classifier.add(Conv2D(64, (3, 3), activation = 'relu'))
    classifier.add(MaxPooling2D(pool_size = (2, 2)))
    
    # Flattening
    classifier.add(Flatten())
    # Fully connection
    classifier.add(Dense(units = 128, activation = 'relu'))
    classifier.add(Dropout(rate = rate)) #KW
    classifier.add(Dense(units = 128, activation = 'relu')) #KW
    classifier.add(Dropout(rate = rate)) #KW
    classifier.add(Dense(units = 128, activation = 'relu')) #KW
    classifier.add(Dropout(rate = rate)) #KW
    classifier.add(Dense(units = 1, activation = 'sigmoid'))
    
    # Compiling the CNN
    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

def run_classifier(bs=32, epochs=10):
    from keras.preprocessing.image import ImageDataGenerator

    train_datagen = ImageDataGenerator(rescale=1./255,
                                       shear_range=0.2,
                                       zoom_range=0.2,
                                       horizontal_flip=True)
    test_datagen = ImageDataGenerator(rescale=1./255)
    
    training_set = train_datagen.flow_from_directory('dataset/training_set',
                                                    target_size=(64, 64),
                                                    batch_size=bs,
                                                    class_mode='binary')
    
    test_set = test_datagen.flow_from_directory('dataset/test_set',
                                                target_size=(64, 64),
                                                batch_size=bs,
                                                class_mode='binary')
    classifier = create_classifier(rate=0.6, input_shape=(150, 150, 3))
    classifier.fit_generator(training_set,
                             steps_per_epoch=(8000/bs),
                             epochs=epochs,
                             validation_data=test_set,
                             validation_steps=(2000/bs))

def main():
    run_classifier(bs=32, epochs=100)

""" Main """
if __name__ == "__main__":
    main()
